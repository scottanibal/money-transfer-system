<?php
/**
 * *© Copyright 2018 - 2020 Visa. All Rights Reserved.**
 *
 * NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.*
 *
 *  By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy (developer.visa.com/privacy).In addition, all permissible uses of the Software must be in support of Visa products, programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com). **THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL FAULTS” BASIS WITHOUT WARRANTY OR  CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.** All brand names are the property of their respective owners, used for identification purposes only, and do not imply product endorsement or affiliation with Visa. Any links to third party sites are for your information only and equally  do not constitute a Visa endorsement. Visa has no insight into and control over third party content and code and disclaims all liability for any such components, including continued availability and functionality. Benefits depend on implementation details and business factors and coding steps shown are exemplary only and do not reflect all necessary elements for the described capabilities. Capabilities and features are subject to Visa’s terms and conditions and may require development,implementation and resources by you based on your business and operational details. Please refer to the specific API documentation for details on the requirements, eligibility and geographic availability.*
 *
 * This Software includes programs, concepts and details under continuing development by Visa. Any Visa features,functionality, implementation, branding, and schedules may be amended, updated or canceled at Visa’s discretion.The timing of widespread availability of programs and functionality is also subject to a number of factors outside Visa’s control,including but not limited to deployment of necessary infrastructure by issuers, acquirers, merchants and mobile device manufacturers.*
 *
 */
/**
 * PushfundspostPayload
 *
 * @category Class
 * @package  funds_transfer_api
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Funds Transfer API
 *
 * The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.
 *
 * OpenAPI spec version: v1
 * Contact:
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace App\Visa\model;

use ArrayAccess;

/**
 * PushfundspostPayload Class Doc Comment
 *
 * @category    Class
 * @description Request body for creating in push funds transfer
 * @package     funds_transfer_api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PushfundspostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'pushfundspostPayload';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'business_application_id' => 'string',
        'retrieval_reference_number' => 'string',
        'card_acceptor' => '\App\Visa\model\CardAcceptor',
        'message_reason_code' => 'int',
        'sender_address' => 'string',
        'sender_city' => 'string',
        'source_of_funds_code' => 'string',
        'recipient_name' => 'string',
        'sender_middle_initial' => 'string',
        'sender_name' => 'string',
        'recipient_state' => 'string',
        'surcharge' => 'string',
        'sender_state_code' => 'string',
        'merchant_category_code' => 'int',
        'sender_last_name' => 'string',
        'point_of_service_data' => '\App\Visa\model\PointOfServiceData',
        'sharing_group_code' => 'string',
        'acquirer_country_code' => 'int',
        'sender_reference' => 'string',
        'recipient_primary_account_number' => 'string',
        'recipient_last_name' => 'string',
        'national_reimbursement_fee' => 'double',
        'sender_postal_code' => 'string',
        'sender_first_name' => 'string',
        'sender_account_number' => 'string',
        'fee_program_indicator' => 'string',
        'sender_identification_number_business' => 'string',
        'transaction_currency_code' => 'string',
        'acquiring_bin' => 'int',
        'account_type' => 'string',
        'merchant_pseudo_aba_number' => 'string',
        'transaction_identifier' => 'int',
        'local_transaction_date_time' => 'string',
        'recipient_first_name' => 'string',
        'amount' => 'double',
        'sender_date_of_birth' => 'string',
        'recipient_middle_initial' => 'string',
        'recipient_card_expiry_date' => 'string',
        'recipient_country_code' => 'string',
        'sender_identification_number_individual' => 'string',
        'systems_trace_audit_number' => 'int',
        'sender_country_code' => 'string',
        'merchant_verification_value' => '\App\Visa\model\MerchantVerificationValue'
    ];
    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'business_application_id' => 'businessApplicationId',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'card_acceptor' => 'cardAcceptor',
        'message_reason_code' => 'messageReasonCode',
        'sender_address' => 'senderAddress',
        'sender_city' => 'senderCity',
        'source_of_funds_code' => 'sourceOfFundsCode',
        'recipient_name' => 'recipientName',
        'sender_middle_initial' => 'senderMiddleInitial',
        'sender_name' => 'senderName',
        'recipient_state' => 'recipientState',
        'surcharge' => 'surcharge',
        'sender_state_code' => 'senderStateCode',
        'merchant_category_code' => 'merchantCategoryCode',
        'sender_last_name' => 'senderLastName',
        'point_of_service_data' => 'pointOfServiceData',
        'sharing_group_code' => 'sharingGroupCode',
        'acquirer_country_code' => 'acquirerCountryCode',
        'sender_reference' => 'senderReference',
        'recipient_primary_account_number' => 'recipientPrimaryAccountNumber',
        'recipient_last_name' => 'recipientLastName',
        'national_reimbursement_fee' => 'nationalReimbursementFee',
        'sender_postal_code' => 'senderPostalCode',
        'sender_first_name' => 'senderFirstName',
        'sender_account_number' => 'senderAccountNumber',
        'fee_program_indicator' => 'feeProgramIndicator',
        'sender_identification_number_business' => 'senderIdentificationNumberBusiness',
        'transaction_currency_code' => 'transactionCurrencyCode',
        'acquiring_bin' => 'acquiringBin',
        'account_type' => 'accountType',
        'merchant_pseudo_aba_number' => 'merchantPseudoAbaNumber',
        'transaction_identifier' => 'transactionIdentifier',
        'local_transaction_date_time' => 'localTransactionDateTime',
        'recipient_first_name' => 'recipientFirstName',
        'amount' => 'amount',
        'sender_date_of_birth' => 'senderDateOfBirth',
        'recipient_middle_initial' => 'recipientMiddleInitial',
        'recipient_card_expiry_date' => 'recipientCardExpiryDate',
        'recipient_country_code' => 'recipientCountryCode',
        'sender_identification_number_individual' => 'senderIdentificationNumberIndividual',
        'systems_trace_audit_number' => 'systemsTraceAuditNumber',
        'sender_country_code' => 'senderCountryCode',
        'merchant_verification_value' => 'merchantVerificationValue'
    ];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'business_application_id' => 'setBusinessApplicationId',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'card_acceptor' => 'setCardAcceptor',
        'message_reason_code' => 'setMessageReasonCode',
        'sender_address' => 'setSenderAddress',
        'sender_city' => 'setSenderCity',
        'source_of_funds_code' => 'setSourceOfFundsCode',
        'recipient_name' => 'setRecipientName',
        'sender_middle_initial' => 'setSenderMiddleInitial',
        'sender_name' => 'setSenderName',
        'recipient_state' => 'setRecipientState',
        'surcharge' => 'setSurcharge',
        'sender_state_code' => 'setSenderStateCode',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'sender_last_name' => 'setSenderLastName',
        'point_of_service_data' => 'setPointOfServiceData',
        'sharing_group_code' => 'setSharingGroupCode',
        'acquirer_country_code' => 'setAcquirerCountryCode',
        'sender_reference' => 'setSenderReference',
        'recipient_primary_account_number' => 'setRecipientPrimaryAccountNumber',
        'recipient_last_name' => 'setRecipientLastName',
        'national_reimbursement_fee' => 'setNationalReimbursementFee',
        'sender_postal_code' => 'setSenderPostalCode',
        'sender_first_name' => 'setSenderFirstName',
        'sender_account_number' => 'setSenderAccountNumber',
        'fee_program_indicator' => 'setFeeProgramIndicator',
        'sender_identification_number_business' => 'setSenderIdentificationNumberBusiness',
        'transaction_currency_code' => 'setTransactionCurrencyCode',
        'acquiring_bin' => 'setAcquiringBin',
        'account_type' => 'setAccountType',
        'merchant_pseudo_aba_number' => 'setMerchantPseudoAbaNumber',
        'transaction_identifier' => 'setTransactionIdentifier',
        'local_transaction_date_time' => 'setLocalTransactionDateTime',
        'recipient_first_name' => 'setRecipientFirstName',
        'amount' => 'setAmount',
        'sender_date_of_birth' => 'setSenderDateOfBirth',
        'recipient_middle_initial' => 'setRecipientMiddleInitial',
        'recipient_card_expiry_date' => 'setRecipientCardExpiryDate',
        'recipient_country_code' => 'setRecipientCountryCode',
        'sender_identification_number_individual' => 'setSenderIdentificationNumberIndividual',
        'systems_trace_audit_number' => 'setSystemsTraceAuditNumber',
        'sender_country_code' => 'setSenderCountryCode',
        'merchant_verification_value' => 'setMerchantVerificationValue'
    ];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'business_application_id' => 'getBusinessApplicationId',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'card_acceptor' => 'getCardAcceptor',
        'message_reason_code' => 'getMessageReasonCode',
        'sender_address' => 'getSenderAddress',
        'sender_city' => 'getSenderCity',
        'source_of_funds_code' => 'getSourceOfFundsCode',
        'recipient_name' => 'getRecipientName',
        'sender_middle_initial' => 'getSenderMiddleInitial',
        'sender_name' => 'getSenderName',
        'recipient_state' => 'getRecipientState',
        'surcharge' => 'getSurcharge',
        'sender_state_code' => 'getSenderStateCode',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'sender_last_name' => 'getSenderLastName',
        'point_of_service_data' => 'getPointOfServiceData',
        'sharing_group_code' => 'getSharingGroupCode',
        'acquirer_country_code' => 'getAcquirerCountryCode',
        'sender_reference' => 'getSenderReference',
        'recipient_primary_account_number' => 'getRecipientPrimaryAccountNumber',
        'recipient_last_name' => 'getRecipientLastName',
        'national_reimbursement_fee' => 'getNationalReimbursementFee',
        'sender_postal_code' => 'getSenderPostalCode',
        'sender_first_name' => 'getSenderFirstName',
        'sender_account_number' => 'getSenderAccountNumber',
        'fee_program_indicator' => 'getFeeProgramIndicator',
        'sender_identification_number_business' => 'getSenderIdentificationNumberBusiness',
        'transaction_currency_code' => 'getTransactionCurrencyCode',
        'acquiring_bin' => 'getAcquiringBin',
        'account_type' => 'getAccountType',
        'merchant_pseudo_aba_number' => 'getMerchantPseudoAbaNumber',
        'transaction_identifier' => 'getTransactionIdentifier',
        'local_transaction_date_time' => 'getLocalTransactionDateTime',
        'recipient_first_name' => 'getRecipientFirstName',
        'amount' => 'getAmount',
        'sender_date_of_birth' => 'getSenderDateOfBirth',
        'recipient_middle_initial' => 'getRecipientMiddleInitial',
        'recipient_card_expiry_date' => 'getRecipientCardExpiryDate',
        'recipient_country_code' => 'getRecipientCountryCode',
        'sender_identification_number_individual' => 'getSenderIdentificationNumberIndividual',
        'systems_trace_audit_number' => 'getSystemsTraceAuditNumber',
        'sender_country_code' => 'getSenderCountryCode',
        'merchant_verification_value' => 'getMerchantVerificationValue'
    ];
    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_application_id'] = isset($data['business_application_id']) ? $data['business_application_id'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['card_acceptor'] = isset($data['card_acceptor']) ? $data['card_acceptor'] : null;
        $this->container['message_reason_code'] = isset($data['message_reason_code']) ? $data['message_reason_code'] : null;
        $this->container['sender_address'] = isset($data['sender_address']) ? $data['sender_address'] : null;
        $this->container['sender_city'] = isset($data['sender_city']) ? $data['sender_city'] : null;
        $this->container['source_of_funds_code'] = isset($data['source_of_funds_code']) ? $data['source_of_funds_code'] : null;
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
        $this->container['sender_middle_initial'] = isset($data['sender_middle_initial']) ? $data['sender_middle_initial'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['recipient_state'] = isset($data['recipient_state']) ? $data['recipient_state'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['sender_state_code'] = isset($data['sender_state_code']) ? $data['sender_state_code'] : null;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['sender_last_name'] = isset($data['sender_last_name']) ? $data['sender_last_name'] : null;
        $this->container['point_of_service_data'] = isset($data['point_of_service_data']) ? $data['point_of_service_data'] : null;
        $this->container['sharing_group_code'] = isset($data['sharing_group_code']) ? $data['sharing_group_code'] : null;
        $this->container['acquirer_country_code'] = isset($data['acquirer_country_code']) ? $data['acquirer_country_code'] : null;
        $this->container['sender_reference'] = isset($data['sender_reference']) ? $data['sender_reference'] : null;
        $this->container['recipient_primary_account_number'] = isset($data['recipient_primary_account_number']) ? $data['recipient_primary_account_number'] : null;
        $this->container['recipient_last_name'] = isset($data['recipient_last_name']) ? $data['recipient_last_name'] : null;
        $this->container['national_reimbursement_fee'] = isset($data['national_reimbursement_fee']) ? $data['national_reimbursement_fee'] : null;
        $this->container['sender_postal_code'] = isset($data['sender_postal_code']) ? $data['sender_postal_code'] : null;
        $this->container['sender_first_name'] = isset($data['sender_first_name']) ? $data['sender_first_name'] : null;
        $this->container['sender_account_number'] = isset($data['sender_account_number']) ? $data['sender_account_number'] : null;
        $this->container['fee_program_indicator'] = isset($data['fee_program_indicator']) ? $data['fee_program_indicator'] : null;
        $this->container['sender_identification_number_business'] = isset($data['sender_identification_number_business']) ? $data['sender_identification_number_business'] : null;
        $this->container['transaction_currency_code'] = isset($data['transaction_currency_code']) ? $data['transaction_currency_code'] : null;
        $this->container['acquiring_bin'] = isset($data['acquiring_bin']) ? $data['acquiring_bin'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['merchant_pseudo_aba_number'] = isset($data['merchant_pseudo_aba_number']) ? $data['merchant_pseudo_aba_number'] : null;
        $this->container['transaction_identifier'] = isset($data['transaction_identifier']) ? $data['transaction_identifier'] : null;
        $this->container['local_transaction_date_time'] = isset($data['local_transaction_date_time']) ? $data['local_transaction_date_time'] : null;
        $this->container['recipient_first_name'] = isset($data['recipient_first_name']) ? $data['recipient_first_name'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['sender_date_of_birth'] = isset($data['sender_date_of_birth']) ? $data['sender_date_of_birth'] : null;
        $this->container['recipient_middle_initial'] = isset($data['recipient_middle_initial']) ? $data['recipient_middle_initial'] : null;
        $this->container['recipient_card_expiry_date'] = isset($data['recipient_card_expiry_date']) ? $data['recipient_card_expiry_date'] : null;
        $this->container['recipient_country_code'] = isset($data['recipient_country_code']) ? $data['recipient_country_code'] : null;
        $this->container['sender_identification_number_individual'] = isset($data['sender_identification_number_individual']) ? $data['sender_identification_number_individual'] : null;
        $this->container['systems_trace_audit_number'] = isset($data['systems_trace_audit_number']) ? $data['systems_trace_audit_number'] : null;
        $this->container['sender_country_code'] = isset($data['sender_country_code']) ? $data['sender_country_code'] : null;
        $this->container['merchant_verification_value'] = isset($data['merchant_verification_value']) ? $data['merchant_verification_value'] : null;
    }

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['retrieval_reference_number'] === null) {
            $invalid_properties[] = "'retrieval_reference_number' can't be null";
        }
        if ($this->container['card_acceptor'] === null) {
            $invalid_properties[] = "'card_acceptor' can't be null";
        }
        if ($this->container['acquirer_country_code'] === null) {
            $invalid_properties[] = "'acquirer_country_code' can't be null";
        }
        if ($this->container['recipient_primary_account_number'] === null) {
            $invalid_properties[] = "'recipient_primary_account_number' can't be null";
        }
        if ($this->container['transaction_currency_code'] === null) {
            $invalid_properties[] = "'transaction_currency_code' can't be null";
        }
        if ($this->container['acquiring_bin'] === null) {
            $invalid_properties[] = "'acquiring_bin' can't be null";
        }
        if ($this->container['local_transaction_date_time'] === null) {
            $invalid_properties[] = "'local_transaction_date_time' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            $invalid_properties[] = "'systems_trace_audit_number' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['retrieval_reference_number'] === null) {
            return false;
        }
        if ($this->container['card_acceptor'] === null) {
            return false;
        }
        if ($this->container['acquirer_country_code'] === null) {
            return false;
        }
        if ($this->container['recipient_primary_account_number'] === null) {
            return false;
        }
        if ($this->container['transaction_currency_code'] === null) {
            return false;
        }
        if ($this->container['acquiring_bin'] === null) {
            return false;
        }
        if ($this->container['local_transaction_date_time'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['systems_trace_audit_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets business_application_id
     * @return string
     */
    public function getBusinessApplicationId()
    {
        return $this->container['business_application_id'];
    }

    /**
     * Sets business_application_id
     * @param string $business_application_id Identifies the programs' business application type for VisaNet transaction processing<br><br>For Money Transfer, AA applies to transactions where the sender and recipient are the same person and PP applies to transactions where the sender and recipient are not the same person.<br><br>Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationId</a> codes
     * @return $this
     */
    public function setBusinessApplicationId($business_application_id)
    {
        $this->container['business_application_id'] = $business_application_id;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number A value used to tie together service calls related to a single financial transaction. When passing Account Funding Transaction (AFT) and an Original Credit Transaction (OCT) methods, this value must differ between the two methods. When passing the Account Funding Transaction Reversal (AFTR) method, this value must match the retrievalReferenceNumber previously passed with the AFT method for this transaction.<br><br> Recommended Format : ydddhhnnnnnn<br><br>The first fours digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year). hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.<br><br> nnnnnn can be the systemsTraceAuditNumber or any 6 digit number.
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets card_acceptor
     * @return \App\Visa\model\CardAcceptor
     */
    public function getCardAcceptor()
    {
        return $this->container['card_acceptor'];
    }

    /**
     * Sets card_acceptor
     * @param \App\Visa\model\CardAcceptor $card_acceptor
     * @return $this
     */
    public function setCardAcceptor($card_acceptor)
    {
        $this->container['card_acceptor'] = $card_acceptor;

        return $this;
    }

    /**
     * Gets message_reason_code
     * @return int
     */
    public function getMessageReasonCode()
    {
        return $this->container['message_reason_code'];
    }

    /**
     * Sets message_reason_code
     * @param int $message_reason_code Contains codes that combined with some other fields such as the BAI (Business Application Id) identify some unique use cases. For Sales Tax rebates this field should be populated with the value 5120 (Value-added tax/Sales Tax) along with the businessApplicationId field set to the value 'FD' which indicates this push funds transfer is being conducted in order to facilitate a sales tax refund.
     * @return $this
     */
    public function setMessageReasonCode($message_reason_code)
    {
        $this->container['message_reason_code'] = $message_reason_code;

        return $this;
    }

    /**
     * Gets sender_address
     * @return string
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     * @param string $sender_address If the transaction is a money transfer and cross-border or U.S. domestic, this field must contain the sender's address.<br><br>If the transaction is a funds disbursement and cross-border or U.S. domestic, this field must contain either the address of the merchant or government entity sending the funds disbursement.<br><br>If the transaction is a pre-paid load or credit card bill pay and U.S. domestic, this field must contain the sender's address.
     * @return $this
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets sender_city
     * @return string
     */
    public function getSenderCity()
    {
        return $this->container['sender_city'];
    }

    /**
     * Sets sender_city
     * @param string $sender_city If the transaction is a money transfer and cross-border or U.S. domestic, this field must contain the sender's city.<br><br>If the transaction is a funds disbursement and cross-border or U.S. domestic, this field must contain either the city of the merchant or government entity sending the funds disbursement.<br><br>If the transaction is a pre-paid load or credit card bill pay and U.S. domestic, this field must contain the sender's city.
     * @return $this
     */
    public function setSenderCity($sender_city)
    {
        $this->container['sender_city'] = $sender_city;

        return $this;
    }

    /**
     * Gets source_of_funds_code
     * @return string
     */
    public function getSourceOfFundsCode()
    {
        return $this->container['source_of_funds_code'];
    }

    /**
     * Sets source_of_funds_code
     * @param string $source_of_funds_code If the transaction is a money transfer, the field is required and must contain a valid <a href=\"/request_response_codes#source_of_funds\">sourceOfFundsCode</a> code that matches the funding instrument.<br><br>If the transaction is a funds disbursement, the field is required and most likely contains a \"05\" as the <a href=\"/request_response_codes#source_of_funds\">sourceOfFundsCode</a> code to identify that the merchant or government entity used a deposit account to fund the disbursement<br><br>If the transaction is a pre-paid load, the field is required if the transaction is non-U.S. domestic.<br><br>If the transaction is a credit bill pay, the field is required if the transaction is non-U.S. domestic, and the <a href=\"/request_response_codes#source_of_funds\">sourceOfFundsCode</a> code must not contain a \"01\" or \"06\".<br><br>Refer to <a href=\"/request_response_codes#source_of_funds\">sourceOfFundsCode</a> codes
     * @return $this
     */
    public function setSourceOfFundsCode($source_of_funds_code)
    {
        $this->container['source_of_funds_code'] = $source_of_funds_code;

        return $this;
    }

    /**
     * Gets recipient_name
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     * @param string $recipient_name Recipient name is required for cross-border enhanced money transfer OCTs.
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets sender_middle_initial
     * @return string
     */
    public function getSenderMiddleInitial()
    {
        return $this->container['sender_middle_initial'];
    }

    /**
     * Sets sender_middle_initial
     * @param string $sender_middle_initial This field contains sender's middle initial
     * @return $this
     */
    public function setSenderMiddleInitial($sender_middle_initial)
    {
        $this->container['sender_middle_initial'] = $sender_middle_initial;

        return $this;
    }

    /**
     * Gets sender_name
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     * @param string $sender_name If the transaction is a money transfer and cross-border or U.S. domestic, this field must contain the sender's name.<br><br>If the transaction is a funds disbursement and cross-border or U.S. domestic, this field must contain either the name of the merchant or government entity sending the funds disbursement.<br><br>If the transaction is a pre-paid load or credit card bill pay and U.S. domestic, this field must contain the sender's name.<br><br>Recommended Format: Last Name/Family Surname 1 + Space + Last Name/Family Surname 2 (optional) + Space + First Name/Given Name + Space + Middle Initial or Middle name (optional) + space<br><br>Example: Doe John A
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets recipient_state
     * @return string
     */
    public function getRecipientState()
    {
        return $this->container['recipient_state'];
    }

    /**
     * Sets recipient_state
     * @param string $recipient_state Required if RecipientCountryCode is either 124(CAN) or 840(USA)
     * @return $this
     */
    public function setRecipientState($recipient_state)
    {
        $this->container['recipient_state'] = $recipient_state;

        return $this;
    }

    /**
     * Gets surcharge
     * @return string
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     * @param string $surcharge When present, this field contains the sender's surcharge as assessed by the originator. Values in this field must be in the same currency and format as defined in the amount field.<br><br><b>Note:</b><br>Supported only in the US.
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets sender_state_code
     * @return string
     */
    public function getSenderStateCode()
    {
        return $this->container['sender_state_code'];
    }

    /**
     * Sets sender_state_code
     * @param string $sender_state_code Required if senderCountryCode is either 124(CAN) or 840(USA)
     * @return $this
     */
    public function setSenderStateCode($sender_state_code)
    {
        $this->container['sender_state_code'] = $sender_state_code;

        return $this;
    }

    /**
     * Gets merchant_category_code
     * @return int
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     * @param int $merchant_category_code If provided, then the value overrides the one present in onboarding data. If the merchantCategoryCode value is not populated in onboarding data then this field is mandatory.<br><br><b>Note:</b> required if not provided during onboarding
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets sender_last_name
     * @return string
     */
    public function getSenderLastName()
    {
        return $this->container['sender_last_name'];
    }

    /**
     * Sets sender_last_name
     * @param string $sender_last_name This field contains sender's last name
     * @return $this
     */
    public function setSenderLastName($sender_last_name)
    {
        $this->container['sender_last_name'] = $sender_last_name;

        return $this;
    }

    /**
     * Gets point_of_service_data
     * @return \App\Visa\model\PointOfServiceData
     */
    public function getPointOfServiceData()
    {
        return $this->container['point_of_service_data'];
    }

    /**
     * Sets point_of_service_data
     * @param \App\Visa\model\PointOfServiceData $point_of_service_data
     * @return $this
     */
    public function setPointOfServiceData($point_of_service_data)
    {
        $this->container['point_of_service_data'] = $point_of_service_data;

        return $this;
    }

    /**
     * Gets sharing_group_code
     * @return string
     */
    public function getSharingGroupCode()
    {
        return $this->container['sharing_group_code'];
    }

    /**
     * Sets sharing_group_code
     * @param string $sharing_group_code This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Sharing Group Code</a><br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setSharingGroupCode($sharing_group_code)
    {
        $this->container['sharing_group_code'] = $sharing_group_code;

        return $this;
    }

    /**
     * Gets acquirer_country_code
     * @return int
     */
    public function getAcquirerCountryCode()
    {
        return $this->container['acquirer_country_code'];
    }

    /**
     * Sets acquirer_country_code
     * @param int $acquirer_country_code Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct solution is registered. This must match the information provided during program enrollment.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>
     * @return $this
     */
    public function setAcquirerCountryCode($acquirer_country_code)
    {
        $this->container['acquirer_country_code'] = $acquirer_country_code;

        return $this;
    }

    /**
     * Gets sender_reference
     * @return string
     */
    public function getSenderReference()
    {
        return $this->container['sender_reference'];
    }

    /**
     * Sets sender_reference
     * @param string $sender_reference If the transaction is a money transfer, pre-paid load, or credit card bill pay, and if the sender intends to fund the transaction with a non-financial instrument (for example, cash), a reference number unique to the sender is required.<br><br>If the transaction is a funds disbursement, the field is required.<br><br> This field is required if senderAccountNumber is not sent.
     * @return $this
     */
    public function setSenderReference($sender_reference)
    {
        $this->container['sender_reference'] = $sender_reference;

        return $this;
    }

    /**
     * Gets recipient_primary_account_number
     * @return string
     */
    public function getRecipientPrimaryAccountNumber()
    {
        return $this->container['recipient_primary_account_number'];
    }

    /**
     * Sets recipient_primary_account_number
     * @param string $recipient_primary_account_number The recipient's PAN.
     * @return $this
     */
    public function setRecipientPrimaryAccountNumber($recipient_primary_account_number)
    {
        $this->container['recipient_primary_account_number'] = $recipient_primary_account_number;

        return $this;
    }

    /**
     * Gets recipient_last_name
     * @return string
     */
    public function getRecipientLastName()
    {
        return $this->container['recipient_last_name'];
    }

    /**
     * Sets recipient_last_name
     * @param string $recipient_last_name When present, this field contains recipient's last name
     * @return $this
     */
    public function setRecipientLastName($recipient_last_name)
    {
        $this->container['recipient_last_name'] = $recipient_last_name;

        return $this;
    }

    /**
     * Gets national_reimbursement_fee
     * @return double
     */
    public function getNationalReimbursementFee()
    {
        return $this->container['national_reimbursement_fee'];
    }

    /**
     * Sets national_reimbursement_fee
     * @param double $national_reimbursement_fee When present, this field contains the IRF fees.
     * @return $this
     */
    public function setNationalReimbursementFee($national_reimbursement_fee)
    {
        $this->container['national_reimbursement_fee'] = $national_reimbursement_fee;

        return $this;
    }

    /**
     * Gets sender_postal_code
     * @return string
     */
    public function getSenderPostalCode()
    {
        return $this->container['sender_postal_code'];
    }

    /**
     * Sets sender_postal_code
     * @param string $sender_postal_code When present, this field contains the sender's postal code
     * @return $this
     */
    public function setSenderPostalCode($sender_postal_code)
    {
        $this->container['sender_postal_code'] = $sender_postal_code;

        return $this;
    }

    /**
     * Gets sender_first_name
     * @return string
     */
    public function getSenderFirstName()
    {
        return $this->container['sender_first_name'];
    }

    /**
     * Sets sender_first_name
     * @param string $sender_first_name This field contains sender's first name
     * @return $this
     */
    public function setSenderFirstName($sender_first_name)
    {
        $this->container['sender_first_name'] = $sender_first_name;

        return $this;
    }

    /**
     * Gets sender_account_number
     * @return string
     */
    public function getSenderAccountNumber()
    {
        return $this->container['sender_account_number'];
    }

    /**
     * Sets sender_account_number
     * @param string $sender_account_number If the transaction is a money transfer, pre-paid load, or credit card bill pay, and if the sender intends to fund the transaction with a financial instrument (for example, debit card),  this field is required and must contain the sender's account number. If the transaction is a funds disbursement, the field is not required.
     * @return $this
     */
    public function setSenderAccountNumber($sender_account_number)
    {
        $this->container['sender_account_number'] = $sender_account_number;

        return $this;
    }

    /**
     * Gets fee_program_indicator
     * @return string
     */
    public function getFeeProgramIndicator()
    {
        return $this->container['fee_program_indicator'];
    }

    /**
     * Sets fee_program_indicator
     * @param string $fee_program_indicator Note: If present, a valid value is required. Spaces or special characters are not allowed.
     * @return $this
     */
    public function setFeeProgramIndicator($fee_program_indicator)
    {
        $this->container['fee_program_indicator'] = $fee_program_indicator;

        return $this;
    }

    /**
     * Gets sender_identification_number_business
     * @return string
     */
    public function getSenderIdentificationNumberBusiness()
    {
        return $this->container['sender_identification_number_business'];
    }

    /**
     * Sets sender_identification_number_business
     * @param string $sender_identification_number_business This is an alphanumeric value that carries the sender’s identification number issued to the sender by the government or an authorized national entity. This field is to be used if the sender is a business (e.g. Disbursements)
     * @return $this
     */
    public function setSenderIdentificationNumberBusiness($sender_identification_number_business)
    {
        $this->container['sender_identification_number_business'] = $sender_identification_number_business;

        return $this;
    }

    /**
     * Gets transaction_currency_code
     * @return string
     */
    public function getTransactionCurrencyCode()
    {
        return $this->container['transaction_currency_code'];
    }

    /**
     * Sets transaction_currency_code
     * @param string $transaction_currency_code Use a 3-character alpha or numeric currency code for currency of the sender. You should (unless prohibited by local law / regulation) use the billingCurrencyCode obtained from the Funds Transfer Attribute Inquiry API under Payment Account Attribute Inquiry. <br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>
     * @return $this
     */
    public function setTransactionCurrencyCode($transaction_currency_code)
    {
        $this->container['transaction_currency_code'] = $transaction_currency_code;

        return $this;
    }

    /**
     * Gets acquiring_bin
     * @return int
     */
    public function getAcquiringBin()
    {
        return $this->container['acquiring_bin'];
    }

    /**
     * Sets acquiring_bin
     * @param int $acquiring_bin The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment.
     * @return $this
     */
    public function setAcquiringBin($acquiring_bin)
    {
        $this->container['acquiring_bin'] = $acquiring_bin;

        return $this;
    }

    /**
     * Gets account_type
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     * @param string $account_type This is used to identify the account type of the senderPrimaryAccountNumber in the request. Below are the possible values.<br><br> 00-Not applicable<br> 10-Saving account<br> 20-Checking account<br> 30-Credit card account<br> 40-Universal account<br><br>Default is set to \"00\" if not provided.
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets merchant_pseudo_aba_number
     * @return string
     */
    public function getMerchantPseudoAbaNumber()
    {
        return $this->container['merchant_pseudo_aba_number'];
    }

    /**
     * Sets merchant_pseudo_aba_number
     * @param string $merchant_pseudo_aba_number This is a number that uniquely identifies the originator when they sign up to send Push Payment Gateway transactions. On enrollment, an originator will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originator.<br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.
     * @return $this
     */
    public function setMerchantPseudoAbaNumber($merchant_pseudo_aba_number)
    {
        $this->container['merchant_pseudo_aba_number'] = $merchant_pseudo_aba_number;

        return $this;
    }

    /**
     * Gets transaction_identifier
     * @return int
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     * @param int $transaction_identifier The VisaNet transaction identifier. If you have previously sent an AFT, this field must include the VisaNet transaction identifier returned in the AFT response.<br><br><b>Note:</b> provide only if there is a corresponding AFT transaction response.
     * @return $this
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets local_transaction_date_time
     * @return string
     */
    public function getLocalTransactionDateTime()
    {
        return $this->container['local_transaction_date_time'];
    }

    /**
     * Sets local_transaction_date_time
     * @param string $local_transaction_date_time
     * @return $this
     */
    public function setLocalTransactionDateTime($local_transaction_date_time)
    {
        $this->container['local_transaction_date_time'] = $local_transaction_date_time;

        return $this;
    }

    /**
     * Gets recipient_first_name
     * @return string
     */
    public function getRecipientFirstName()
    {
        return $this->container['recipient_first_name'];
    }

    /**
     * Sets recipient_first_name
     * @param string $recipient_first_name When present, this field contains recipient's first name
     * @return $this
     */
    public function setRecipientFirstName($recipient_first_name)
    {
        $this->container['recipient_first_name'] = $recipient_first_name;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount The transaction amount to be delivered to the recipient.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets sender_date_of_birth
     * @return string
     */
    public function getSenderDateOfBirth()
    {
        return $this->container['sender_date_of_birth'];
    }

    /**
     * Sets sender_date_of_birth
     * @param string $sender_date_of_birth The birth date for the sender
     * @return $this
     */
    public function setSenderDateOfBirth($sender_date_of_birth)
    {
        $this->container['sender_date_of_birth'] = $sender_date_of_birth;

        return $this;
    }

    /**
     * Gets recipient_middle_initial
     * @return string
     */
    public function getRecipientMiddleInitial()
    {
        return $this->container['recipient_middle_initial'];
    }

    /**
     * Sets recipient_middle_initial
     * @param string $recipient_middle_initial When present, this field contains recipient's middle initial
     * @return $this
     */
    public function setRecipientMiddleInitial($recipient_middle_initial)
    {
        $this->container['recipient_middle_initial'] = $recipient_middle_initial;

        return $this;
    }

    /**
     * Gets recipient_card_expiry_date
     * @return string
     */
    public function getRecipientCardExpiryDate()
    {
        return $this->container['recipient_card_expiry_date'];
    }

    /**
     * Sets recipient_card_expiry_date
     * @param string $recipient_card_expiry_date The expiration date for the recipient's primary account number in  recipientPrimaryAccountNumber
     * @return $this
     */
    public function setRecipientCardExpiryDate($recipient_card_expiry_date)
    {
        $this->container['recipient_card_expiry_date'] = $recipient_card_expiry_date;

        return $this;
    }

    /**
     * Gets recipient_country_code
     * @return string
     */
    public function getRecipientCountryCode()
    {
        return $this->container['recipient_country_code'];
    }

    /**
     * Sets recipient_country_code
     * @param string $recipient_country_code when present, this field contains recipient's country code <br><br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>
     * @return $this
     */
    public function setRecipientCountryCode($recipient_country_code)
    {
        $this->container['recipient_country_code'] = $recipient_country_code;

        return $this;
    }

    /**
     * Gets sender_identification_number_individual
     * @return string
     */
    public function getSenderIdentificationNumberIndividual()
    {
        return $this->container['sender_identification_number_individual'];
    }

    /**
     * Sets sender_identification_number_individual
     * @param string $sender_identification_number_individual This is an alphanumeric value that carries the sender’s identification number issued to the sender by the government or an authorized national entity. This field is to be used if the sender is an Individual (e.g. P2P payments)
     * @return $this
     */
    public function setSenderIdentificationNumberIndividual($sender_identification_number_individual)
    {
        $this->container['sender_identification_number_individual'] = $sender_identification_number_individual;

        return $this;
    }

    /**
     * Gets systems_trace_audit_number
     * @return int
     */
    public function getSystemsTraceAuditNumber()
    {
        return $this->container['systems_trace_audit_number'];
    }

    /**
     * Sets systems_trace_audit_number
     * @param int $systems_trace_audit_number A unique value should be used for each API method. However, when passing the (AFTR) method, this value must match the systemsTraceAuditNumber previously passed with the AFT method for the current transaction.
     * @return $this
     */
    public function setSystemsTraceAuditNumber($systems_trace_audit_number)
    {
        $this->container['systems_trace_audit_number'] = $systems_trace_audit_number;

        return $this;
    }

    /**
     * Gets sender_country_code
     * @return string
     */
    public function getSenderCountryCode()
    {
        return $this->container['sender_country_code'];
    }

    /**
     * Sets sender_country_code
     * @param string $sender_country_code If the transaction is a money transfer and cross-border or U.S. domestic, this field must contain the sender's country code.<br><br>If the transaction is a funds disbursement and cross-border or U.S. domestic, this field must contain either the country code of the merchant or government entity sending the funds disbursement.<br><br>If the transaction is a pre-paid load or credit card bill pay and U.S. domestic, this field must contain the sender's country code.<br><br>Alpha or numeric country code can be supported.<br><br>This field is required when sending the transactions to some of the US debit networks.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>
     * @return $this
     */
    public function setSenderCountryCode($sender_country_code)
    {
        $this->container['sender_country_code'] = $sender_country_code;

        return $this;
    }

    /**
     * Gets merchant_verification_value
     * @return \App\Visa\model\MerchantVerificationValue
     */
    public function getMerchantVerificationValue()
    {
        return $this->container['merchant_verification_value'];
    }

    /**
     * Sets merchant_verification_value
     * @param \App\Visa\model\MerchantVerificationValue $merchant_verification_value
     * @return $this
     */
    public function setMerchantVerificationValue($merchant_verification_value)
    {
        $this->container['merchant_verification_value'] = $merchant_verification_value;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\App\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\App\ObjectSerializer::sanitizeForSerialization($this));
    }
}
